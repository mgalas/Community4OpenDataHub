<?php
/**
 * @file
 * Provides mail accounts to existing Drupal users.
 *
 * The Mailfix module integrates your Drupal server with a Mail server.
 * The suggested mail server is a combination of Postfix + Dovecot. However,
 * any mail server able to query a MySQL repository should be able to be
 * configured in conjunction with this module.
 */

require_once drupal_get_path('module', 'mailfix') . '/mailfix.inc';

/**
 * Implementation of hook_help().
 */
function mailfix_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#mailfix':
      $output = t('<p>The Mailfix module is intended to offer mail accounts to Drupal users. This module offers the following benefits:</p><ul><li>You can manage multiple domains for mail delivery</li><li>Drupal and mail accounts share the same password, thus allowing users to manage their own credentials.</li><li>Users can access their mailbox using POP3, POP3S, IMAP and IMAPS</li><li>Quota support, with per-domain defaults and individual user settings</li><li>Mail forwarding (very useful for disabled accounts)</li><li>Silent BCC monitoring of specific accounts</li><li>Watchdog auditing of Mailfix events</li></ul><p>Once you have registered one or more Mailfix domains, new and existing users who\'s mail address matches any of those will have a <em>Mailfix settings</em> section in their account profile, filled with default mail quota. You will be able to configure individual settings for automatic forwarding and silent BCC monitoring.</p><p>Detailed instructions to configure the Postfix mail server are available at <a href="http://www.howtoforge.com/drupal-plus-postfix-integration-under-ubuntu-8.04">HowtoForge</a></p>');
      break;
    case 'admin/config/system/mailfix':
      $output = t('This is the list of currently registered Mailfix domains. When you delete a domain, all associated Mailfix user profiles will be deleted.');
      break;
    case 'admin/config/system/mailfix/add':
      $output = t('<p>When you add a new Mailfix domain, the following operations take place:</p><ol><li>Existing users\' email addresses are scanned for matching domains.</li><li>Every matching profile is populated with default quota</li></ol><p>From now on, if your Postfix server is appropriately configured, associated users will be able to user their mail account.</p>');
      break;
  }
  return $output;
} // mailfix_help

/**
 * Implementation of hook_permssion().
 */
function mailfix_permission() {
  return array(
    'edit own mailfix settings' => array(
      'title' => t('Edit one\'s own mailfix settings'),
    ),
    'register a user in a mailfix domain' => array(
      'title' => t('Register a user in a mailfix domain'),
    ),
    'view bcc settings' => array(
      'title' => t('View BCC settings'),
    ),
    'edit bcc settings' => array(
      'title' => t('Edit BCC settings'),
    ),
    'edit quotas' => array(
      'title' => t('Edit quotas'),
    ),
    'edit senders' => array(
      'title' => t('Edit senders'),
    ),
    'view senders' => array(
      'title' => t('View senders'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function mailfix_menu() {
  $items['admin/config/system/mailfix'] = array(
    'title' => 'Mailfix domains',
    'description' => 'Configure mail server domains.',
    'page callback' => 'mailfix_domains_overview',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mailfix.domains.inc',
  );

  $items['admin/config/system/mailfix/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/system/mailfix/add'] = array(
    'title' => 'Add domain',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailfix_add_domain_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'mailfix.domains.inc',
  );

  $items['admin/config/system/mailfix/edit/%'] = array(
    'title' => 'Edit domain',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailfix_edit_domain_form', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'mailfix.domains.inc',
  );

  $items['admin/config/system/mailfix/delete/%'] = array(
    'title' => 'Delete Domain',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailfix_domain_delete', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'mailfix.domains.inc',
  );

  return $items;
} // mailfix_menu

/**
 * Implementation of hook_form_alter().
 */
function mailfix_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

	switch ($form_id) {
		case 'user_register_form':
			$form['#validate'][] = mailfix_validate_new_user;
		case 'user_profile_form':
      if ($form['#user_category'] != 'account')
        return;

      $account = &$form['#user'];
      // These need to be set here so that if an admin changes a non-Mailfix user's email, putting them into a Mailfix domain, we notice the changes.
      $form['#validate'][] = 'mailfix_form_user_validate';

      // Only those users who's mail address matches registered domains
      // have a mailfix settings section.
      if (_mailfix_get_user($account) == 0) // Found in Mailfix tables?
        return;

      // Create the outer content
      $access = user_access('administer users') | module_invoke_all('mailfix_access', 'edit', $account);
      if ($access) {
        $form['mailfix'] = array(
          '#type' => 'fieldset',
          '#title' => t('Mailfix Settings'),
          '#description' => t('<p>If you <em>update</em> an account\'s e-mail, the Mailfix module will drop any existing Mailfix profile. Then it will verify if the new address matches a registered domain. If a match is found, a Mailfix profile will be created with domain\'s default settings. If no match is found, no Mailfix profile will be created.</p><p>If you <em>block</em> an account, it will stop receiveing mails and BCC monitoring will be turned off. However, if the <em>forward</em> field is set, incoming mails can still be forwarded to someone else (e.g. a supervisor).</p><p>If you <em>delete</em> an account, the associated Mailfix profile will be deleted as well.</p>'),
        );

        $form['mailfix']['domain_name'] = array(
          '#type' => 'item',
          '#title' => t('Mail domain'),
          '#value' => $account->mailfix['domain_name'],
        );
        if (user_access('administer users') || user_access('edit quotas')) {
          $form['mailfix']['quota'] = array(
            '#type' => 'textfield',
            '#title' => t('Quota limit'),
            '#description' => t('This is the quota limit for %username in bytes. Useful information: 1kB = 1024 bytes, 1MB = 1048576 bytes, 1GB = 1073741824 bytes', array('%username' => $account->name)),
            '#default_value' => $account->mailfix['quota'],
            '#maxlength' => 19,  // MySQL bigint max unsigned value: 9223372036854775808
            '#size' => 20,  
            '#required' => TRUE, 
          );
        }
      }
      else {
        $form['mailfix'] = array(
          '#type' => 'fieldset',
          '#title' => t('Mail Settings'),
          '#description' => t('You can control where email to your account should be sent. If you have not configured your email to be forwarded, it will be stored on the server. You can then retrieve the email from the server using a client like Outlook.'),
        );
      }

      $form['mailfix']['forward'] = array(
        '#title' => t('Forward destination(s)'),
        '#description' => t('If defined, incoming mails will no longer be delivered to %email. Instead, they will be forwarded to given destination(s). You can specify multiple recipients (one per line). Automatic forwarding is useful in scenarios such as vacations, temporary leave or disabled accounts.', array('%email' => $account->mail)),
        '#type' => 'textarea',
        '#rows' => 3, 
        '#default_value' => str_replace(",", "\n", $account->mailfix['forward']),
        '#required' => FALSE, 
      );
      if (user_access('administer users') || user_access('edit bcc settings')) {
        $form['mailfix']['silent_bcc'] = array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#title' => t('Silent BCC Monitoring'),
          '#description' => t('You can specify silent monitoring of incoming and outgoing messages for this account. Silent monitoring is useful to audit activity of specific users. You can specify multiple recipients (one per line).'),
        );
        $form['mailfix']['silent_bcc']['incoming_bcc'] = array(
          '#title' => t('Incoming messages'),
          '#description' => t('If defined, any incoming mail for %email will be copied as <acronym title="Blind Carbon Copy">BCC</acronym> to given destinations.', array('%email' => $account->mail)),
          '#type' => 'textarea',
          '#rows' => 3, 
          '#default_value' => str_replace(",", "\n", $account->mailfix['incoming_bcc']),
          '#required' => FALSE, 
        );
        $form['mailfix']['silent_bcc']['outgoing_bcc'] = array(
          '#title' => t('Outgoing messages'),
          '#description' => t('If defined, any outgoing mail from %email will be copied as <acronym title="Blind Carbon Copy">BCC</acronym> to given destinations.', array('%email' => $account->mail)),
          '#type' => 'textarea',
          '#rows' => 3, 
          '#default_value' => str_replace(",", "\n", $account->mailfix['outgoing_bcc']),
          '#required' => FALSE, 
        );
      }
      if (user_access('administer users') || user_access('edit senders')) {
        $form['mailfix']['sender_restrictions'] = array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#title' => t('Sender Restrictions'),
        );
        $form['mailfix']['sender_restrictions']['senders'] = array(
          '#title' => t('Allowed Senders'),
          '#description' => t('You can allow email to this address from only certain senders. Give one address per line, or leave empty to place no such restrictions. To be effective, your Mailserver must be configured to check this field.'),
          '#type' => 'textarea',
          '#rows' => 3, 
          '#default_value' => str_replace(",", "\n", $account->mailfix['senders']),
          '#required' => FALSE, 
        );
      }
	}
}

function mailfix_user_delete($account)
{
  // Delete from {mailfix_users} table
  db_delete('mailfix_users')
    ->condition('uid', $account->uid)
    ->execute();

  // And from the domain admins table
  db_delete('mailfix_domain_admins')
    ->condition('uid', $account->uid)
    ->execute();
} // mailfix_user

function mailfix_validate_new_user($edit) {
  // Check a user isn't trying to create an account in a mailfix domain
  if (!user_access('register a user in a mailfix domain')) {
    $domain_id = mailfix_domain_id_from_email($edit['mail']);
    if ($domain_id) {
      form_set_error('mail', t('Invalid email address (this is a locally managed Mailfix domain).'));
      return;
    } 
  }

  // If the user can only create Mailfix domain users, check they're doing that.
}

function mailfix_form_user_update(&$edit, $account, $category = NULL)
{
  mailfix_user_update($edit, $account);
}

function mailfix_user_insert(&$edit, $account, $category = NULL)
{
  mailfix_user_update($edit, $account);
}

/**
 * Add/update user mailfix settings
 *
 * @param object $edit
 *    User form object with current information passed by reference.
 * @param object $account
 *    User object passed by reference.
 */
function mailfix_user_update(&$edit, $account, $category = NULL)
{

  $access = user_access('administer users') | module_invoke_all('mailfix_access', 'edit', $account);

  // If mail address has been changed we must update mailfix_users record
  if (!empty($edit['mail'])) {
    $domain_id = mailfix_domain_id_from_email($edit['mail']);
    if ($domain_id > 0) { // new email matches one registered domain
      if (!isset($edit['quota']) || empty($edit['quota'])) {  // quota has been modified
      	$query = db_select('mailfix_domains', 'md');
      	$query->condition('md.domain_id', $domain_id, "=")
      	->fields('md', array('default_quota'));
      	$edit['quota'] = $query->execute()
      	->fetchField();
      }
      $edit['domain_id'] = $domain_id;
      _mailfix_set_user($edit, $account);
    }
    else {  // new email doesn't match any registered domain
      db_delete('mailfix_users')
        ->condition('uid', $account->uid)
        ->execute();
      watchdog(
        'mailfix', 
        'Mailfix profile for %user_name deleted.', 
        array('%user_name' => $account->name), 
        WATCHDOG_NOTICE, 
        l('view', 'admin/user/user/' . $account->uid)
      );
    }
  } else
    _mailfix_set_user($form_state['values'], $account);
} //  mailfix_form_user_submit

/**
 * We must validate a few Mailfix fields for proper handling.
 */
function mailfix_form_user_validate($form, &$form_state) {
  if (isset($form_state['values']['quota']) && (user_access('administer users') || user_access('edit quotas'))) {
    if ($form_state['values']['quota'] < 0) {
      form_set_error('mail storage quota', t('The mail storage quota must be a positive value.'));
    }
    if (!is_numeric($form_state['values']['quota'])) {
      form_set_error('mail storage quota', t('The mail storage quota must be an integer value. Provided value: %quota', array('%quota' => $form_state['values']['quota'])));
    }
  }
  // forward field is not required, thus validate only if filled
  if (!empty($form_state['values']['forward'])) { 
    // forward field is received as 1 address per line
    $emails = explode("\n", $form_state['values']['forward']);
    $isvalid = TRUE;
    foreach ($emails as &$email) {  // by reference as some cleanup may apply
      $email = trim($email);
      if (!valid_email_address($email)) {
        $isvalid = FALSE;
      }
    }
    if (!$isvalid) {  // one or more illegal email addresses
      form_set_error('forward email recipients', t('The specified Forward destination(s) contains illegal email address(es). Spaces or any other special characters except dash (-) and underscore (_) are not allowed. If multiple recipients are specified, you must define one email address per line.'));
    }
    else { // clean addresses, thus forward field must be prepared as comma delimited string
      $form_state['values']['forward'] = implode(",", $emails);
    }
  }
  if (user_access('administer users') || user_access('edit bcc settings')) {
    // incoming_bcc field is not required, thus validate only if filled
    if (!empty($form_state['values']['incoming_bcc'])) { 
      // incoming_bcc field is received as 1 address per line
      $emails = explode("\n", $form_state['values']['incoming_bcc']);
      $isvalid = TRUE;
      foreach ($emails as &$email) {  // by reference as some cleanup may apply
        $email = trim($email);
        if (!valid_email_address($email)) {
          $isvalid = FALSE;
        }
      }
      if (!$isvalid) {  // one or more illegal emai addresses
        form_set_error('incoming BCC email recipients', t('The specified Incoming BCC destination(s) contains illegal email address(es). Spaces or any other special characters except dash (-) and underscore (_) are not allowed. If multiple recipients are specified, you must define one email address per line.'));
      }
      else { // clean addresses, thus forward field must be prepared as comma delimited string
        $form_state['values']['incoming_bcc'] = implode(",", $emails);
      }
    }
    // outgoing_bcc field is not required, thus validate only if filled
    if (!empty($form_state['values']['outgoing_bcc'])) { 
      // outgoing_bcc field is received as 1 address per line
      $emails = explode("\n", $form_state['values']['outgoing_bcc']);
      $isvalid = TRUE;
      foreach ($emails as &$email) {  // by reference as some cleanup may apply
        $email = trim($email);
        if (!valid_email_address($email)) {
          $isvalid = FALSE;
        }
      }
      if (!$isvalid) {  // one or more illegal emai addresses
        form_set_error('outgoing BCC email recipients', t('The specified Outgoing BCC destination(s) contains illegal email address(es). Spaces or any other special characters except dash (-) and underscore (_) are not allowed. If multiple recipients are specified, you must define one email address per line.'));
      }
      else { // clean addresses, thus forward field must be prepared as comma delimited string
        $form_state['values']['outgoing_bcc'] = implode(",", $emails);
      }
    }
  }

  if (user_access('administer users') || user_access('edit senders')) {
    // incoming_bcc field is not required, thus validate only if filled
    if (!empty($form_state['values']['senders'])) { 
      // senders field is received as 1 address per line
      $emails = explode("\n", $form_state['values']['senders']);
      $isvalid = TRUE;
      foreach ($emails as &$email) {  // by reference as some cleanup may apply
        $email = trim($email);
        if (!valid_email_address($email)) {
          $isvalid = FALSE;
        }
      }
      if (!$isvalid) {  // one or more illegal emai addresses
        form_set_error('allowed senders', t('The specified Sender(s) contain illegal email address(es). Spaces or any other special characters except dash (-) and underscore (_) are not allowed. If multiple recipients are specified, you must define one email address per line.'));
      }
      else { // clean addresses, thus forward field must be prepared as comma delimited string
        $form_state['values']['senders'] = implode(",", $emails);
      }
    }
  }
} //  mailfix_form_user_validate

/**
 * Inject mailfix information when user's info is being displayed.
 *
 * @param object $account
 *    User object passed by reference.
 */
function mailfix_user_view($account, $view_mode, $langcode) {
  // Extract current mailfix settings for this user
  $access = user_access('administer users') | module_invoke_all('mailfix_access', 'view', $account);

  _mailfix_get_user($account);

  // If they exist, display user's mailfix settings
  if (empty($account->mailfix) || !$access)
    return;

  // Create the outer content
  $account->content['mailfix'] = array(
    '#type' => 'user_profile_category',   // a core themable hook
    '#attributes' => array('class' => 'user-mailfix'),
    '#weight' => -5,
    '#title' => t('Mailfix Settings'),
    );

  $account->content['mailfix']['info'] = array(
    '#type' => 'user_profile_item',     // another core themable hook
    '#title' => NULL,
    '#weight' => -5,
    '#markup' => empty($account->mailfix['forward']) ? t('Your email is being stored on the server. You can retrieve it using a client like Outlook.') : t('Email is being forwarded to the address(es) below.'),
   );

  if (user_access('administer users')) {
    // Display summary of mailfix settings
    $account->content['mailfix']['domain_name'] = array(
      '#type' => 'user_profile_item',     // another core themable hook
      '#title' => t('Mail domain'),
      '#markup' => $account->mailfix['domain_name'],
    );
  }

  // The quota is irrelevant if mail is being forwarded.
  if (empty($account->mailfix['forward'])) {
    $account->content['mailfix']['quota'] = array(
      '#type' => 'user_profile_item',     // another core themable hook
      '#title' => t('Quota'),
      '#markup' => (!isset($account->mailfix['quota']) || $account->mailfix['quota'] == 0) ? t('unlimited') : format_size($account->mailfix['quota']),
    );
  }
  else {
    $account->content['mailfix']['forward'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Forward mail to'),
      '#markup' => $account->mailfix['forward'],
    );
  }

  if (user_access('administer users') || user_access('view bcc settings')) {
    if (!empty($account->mailfix['incoming_bcc'])) {
      $account->content['mailfix']['incoming_bcc'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('BCC incoming mail to'),
        '#markup' => $account->mailfix['incoming_bcc'],
      );
    }

    if (!empty($account->mailfix['outgoing_bcc'])) {
      $account->content['mailfix']['outgoing_bcc'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('BCC outgoing mail to'),
        '#markup' => $account->mailfix['outgoing_bcc'],
      );
    }
  }

  if (user_access('administer users') || user_access('view senders') || user_access('edit senders')) {
    if (!empty($account->mailfix['senders'])) {
      $account->content['mailfix']['senders'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Only accept email from'),
        '#value' => $account->mailfix['senders'],
      );
    }
  }
} // mailfix_user_view

/**
 * Helper function to retrieve user's mailfix configuration.
 *
 * @param object $account
 *    User object passed by reference to include mailfix settings.
 * @return integer
 *    1 if user mailfix exists, 0 if not.
 */
function _mailfix_get_user(&$account) {
  $query = db_select('mailfix_users', 'mu');
  $query->fields('mu');
  $query->join('mailfix_domains', 'md', 'mu.domain_id = md.domain_id');
  $query->addField('md', 'domain_name');
  $query->condition('uid', $account->uid, '=');
  $result = $query->execute()->fetchAssoc();
  //$sql = 'SELECT u.uid, u.domain_id, u.quota, u.forward, u.incoming_bcc, u.outgoing_bcc, u.senders, d.domain_name '
  //  . 'FROM {mailfix_domains} d JOIN {mailfix_users} u ON d.domain_id = u.domain_id '
  //  . 'WHERE u.uid = :uid ';
  $found = 0;
  if ($result) {
    $account->mailfix = array(
      'domain_id' => $result['domain_id'],
      'domain_name' => $result['domain_name'],
      'forward' => $result['forward'],
    );

    if (user_access('administer users') || user_access('edit quotas'))
      $account->mailfix['quota'] = $result['quota'];

    if (user_access('administer users') || user_access('edit bcc settings') || user_access('view bcc settings')) {
      $account->mailfix['incoming_bcc'] = $result['incoming_bcc'];
      $account->mailfix['outgoing_bcc'] = $result['outgoing_bcc'];
    }

    if (user_access('administer users') || user_access('edit senders') || user_access('view senders')) {
      $account->mailfix['senders'] = $result['senders'];
    }

    $found = 1;
  };
  return $found;
} // _mailfix_get_user

/**
 * Helper function to store user's mailfix configuration.
 *
 * @param object $account
 *    User object passed by reference to include mailfix settings.
 */
function _mailfix_set_user(&$edit, &$account) {
  $access = user_access('administer users') | module_invoke_all('mailfix_access', 'edit', $account);
  if (!$access) {
    $sql = 'SELECT u.uid, u.domain_id, u.quota, u.forward, u.incoming_bcc, u.outgoing_bcc, u.senders, d.domain_name '
    . 'FROM {mailfix_domains} d JOIN {mailfix_users} u ON d.domain_id = u.domain_id '
    . 'WHERE u.uid = :uid ';
    if ($result = db_query($sql, array(':uid' => $account->uid))) {
      $edit['domain_id'] = $result[0]->domain_id;
      if (!(user_access('administer users') || user_access('edit quotas')))
        $edit['quota'] = $result[0]->quota;

      if (!(user_access('administer users') || user_access('edit bcc settings'))) {
        $edit['incoming_bcc'] = $result[0]->incoming_bcc;
        $edit['outgoing_bcc'] = $result[0]->outgoing_bcc;
      }

      if (!(user_access('administer users') || user_access('edit senders'))) {
        $edit['senders'] = $result[0]->senders;
      }
    }
    else {
      form_set_error('forward', t('Unable to save Mailfix settings - no existing database record was found.'));
      return;
    }
  }

  if (!isset($edit['forward'])) {
  	$edit['forward'] = "";
  }
  
  if (!isset($edit['incoming_bcc'])) {
  	$edit['incoming_bcc'] = "";
  }
  
  if (!isset($edit['outgoing_bcc'])) {
  	$edit['outgoing_bcc'] = "";
  }
  
  if (!isset($edit['senders'])) {
  	$edit['senders'] = "";
  }
  
  db_merge('mailfix_users')
    ->key(array('uid' => $account->uid))
    ->fields(array(
      'domain_id' => $edit['domain_id'],
      'quota' => $edit['quota'],
      'forward' => $edit['forward'],
      'incoming_bcc' => $edit['incoming_bcc'],
      'outgoing_bcc' => $edit['outgoing_bcc'],
      'senders' => $edit['senders']))
      ->execute();
}
